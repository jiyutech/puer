// Generated by CoffeeScript 1.4.0
(function() {
  var Router, connectPuer, cwd, express, fs, helper, http, httpProxy, os, path, processOptions, puer, qrcode, url, watchFile, weinre,
    __hasProp = {}.hasOwnProperty;

  fs = require('fs');

  http = require('http');

  path = require('path');

  express = require('express');

  httpProxy = require('http-proxy');

  connectPuer = require('./connect-puer');

  require('coffee-script');

  weinre = require('weinre');

  os = require('os');

  qrcode = require('qrcode-npm');

  url = require('url');

  Router = require('express/lib/router/index');

  helper = require("./helper");

  cwd = process.cwd();

  watchFile = function(filename, callback) {
    var isWin;
    isWin = process.platform === 'win32';
    if (isWin) {
      return fs.watch(filename, function(event) {
        if (event === 'change') {
          return callback(filename);
        }
      });
    } else {
      return fs.watchFile(filename, {
        interval: 200
      }, function(curr, prev) {
        if (curr.mtime > prev.mtime) {
          return callback(filename);
        }
      });
    }
  };

  processOptions = function(options) {
    return helper.merge(options, {
      port: 8000,
      reload: true,
      dir: cwd,
      launch: true,
      addon: null,
      proxy: null
    });
  };

  puer = module.exports = function(options) {
    var addon, app, dev, genQr, ifaces, key, proxy, restRoute, server, _ref;
    if (options == null) {
      options = {};
    }
    processOptions(options);
    options.dir = path.resolve(cwd, options.dir);
    options.ips = [];
    options.inject = [];
    ifaces = os.networkInterfaces();
    for (dev in ifaces) {
      ifaces[dev].forEach(function(details) {
        if (details.family === 'IPv4' && details.address !== '127.0.0.1') {
          return options.ips.push(details.address);
        }
      });
    }
    app = express();
    server = http.createServer(app);
    app.use(connectPuer(app, server, options));
    genQr = function(content, start) {
      var qr;
      if (start == null) {
        start = 2;
      }
      try {
        qr = qrcode.qrcode(start, 'L');
        qr.addData(content || '');
        qr.make();
        return qr;
      } catch (err) {
        if (start > 8) {
          throw err;
        } else {
          return genQr(content, start + 2);
        }
      }
    };
    app.get('/puer/qrcode', function(req, res, next) {
      var query;
      query = url.parse(req.url, true).query;
      return res.send({
        code: 200,
        result: genQr(query.url, 2).createImgTag(4)
      });
    });
    if (options.inspect) {
      weinre.run({
        httpPort: 9001,
        boundHost: '-all-',
        verbose: false,
        debug: false,
        readTimeout: 20,
        deathTimeout: 50
      });
      options.inject.push("<script>\n  var url = 'http://'+location.host.replace(/\:\\d+/, '') +':9001'+ '/target/target-script-min.js#anonymous' \n  var script = document.createElement('script');\n  script.src = url;\n  var head = document.head;\n  if(head){\n    head.appendChild(script);\n  }\n  \n</script>");
    }
    if (options.proxy) {
      proxy = httpProxy.createProxyServer({});
    }
    if (!options.proxy) {
      _ref = helper.requireFolder(path.join(__dirname, "./addons"));
      for (key in _ref) {
        if (!__hasProp.call(_ref, key)) continue;
        addon = _ref[key];
        addon(app, options);
      }
      app.use(express["static"](options.dir));
    }
    if (options.addon) {
      addon = {
        name: path.resolve(__dirname, options.addon)
      };
      restRoute = function() {
        var callback, method, pt, tmp, type, _ref1;
        try {
          addon.router = new Router(app);
          delete require.cache[addon.name];
          addon.routes = require(addon.name);
          _ref1 = addon.routes;
          for (pt in _ref1) {
            if (!__hasProp.call(_ref1, pt)) continue;
            callback = _ref1[pt];
            type = typeof callback;
            tmp = pt.split(/\s+/);
            if (tmp.length > 1) {
              pt = tmp[1];
              method = tmp[0];
            } else {
              pt = tmp[0];
              method = 'GET';
            }
            if (type === "string") {
              callback = (function(callback) {
                return function(req, res, next) {
                  return fs.readFile(path.join(path.dirname(options.addon), callback), 'utf8', function(err, content) {
                    if (!err) {
                      return res.send(content);
                    } else {
                      return next();
                    }
                  });
                };
              })(callback);
            }
            if (type === "array" || type === 'object') {
              callback = (function(callback) {
                return function(req, res, next) {
                  return res.send(callback);
                };
              })(callback);
            }
            addon.router.route(method, pt, callback);
          }
          return helper.log("addon update !!!" + addon.name);
        } catch (e) {
          return helper.log(e.message, "error");
        }
      };
      restRoute();
      watchFile(addon.name, restRoute);
      app.use(function(req, res, next) {
        var route;
        if (addon.router) {
          route = addon.router.matchRequest(req);
          if (route && route.callbacks && route.callbacks[0]) {
            req.params = route.params;
            return route.callbacks[0].call(app, req, res, next);
          } else {
            return next();
          }
        } else {
          return next();
        }
      });
    }
    if (options.proxy) {
      proxy.on('proxyRes', function(proxyRes, req, res, options) {});
      app.use(function(req, res, next) {
        return proxy.web(req, res, {
          changeOrigin: true,
          target: options.proxy
        }, function(err) {});
      });
    }
    return server.listen(options.port, function(err) {
      if (err) {
        return helper.log("port conflict, please change port use -h to show the help", "err");
      }
      helper.log("server start at localhost:" + options.port);
      if (options.launch) {
        return helper.openBrowser("http://localhost:" + options.port, function(err) {
          return helper.log(err || "puer will launch your default browser");
        });
      }
    });
  };

  puer.connect = connectPuer;

}).call(this);
